/*
 Copyright (C) 2019 Quaternion Risk Management Ltd
 All rights reserved.

 This file is part of ORE, a free-software/open-source library
 for transparent pricing and risk analysis - http://opensourcerisk.org

 ORE is free software: you can redistribute it and/or modify it
 under the terms of the Modified BSD License.  You should have received a
 copy of the license along with this program.
 The license is also available online at <http://opensourcerisk.org>

 This program is distributed on the basis that it will form a useful
 contribution to risk analytics and model standardisation, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 FITNESS FOR A PARTICULAR PURPOSE. See the license for more details.
*/

#include "toplevelfixture.hpp"
#include <boost/algorithm/string.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/make_shared.hpp>
#include <boost/test/unit_test.hpp>
#include <ql/quotes/simplequote.hpp>
#include <ql/time/calendars/target.hpp>
#include <ql/time/daycounters/actual365fixed.hpp>
#include <qle/termstructures/interpolateddiscountcurve.hpp>
#include <qle/termstructures/equityforwardcurvestripper.hpp>

using namespace boost::unit_test_framework;
using namespace QuantLib;
using namespace QuantExt;
using namespace std;

BOOST_FIXTURE_TEST_SUITE(QuantExtTestSuite, qle::test::TopLevelFixture)

BOOST_AUTO_TEST_SUITE(EquityForwardCurveStripper)

BOOST_AUTO_TEST_CASE(testEquityForwardCurveStripperEuropean) {
    BOOST_TEST_MESSAGE("Testing equity forward stripper with European Option prices");

    SavedSettings backup;

    Settings::instance().evaluationDate() = Date(24, Apr, 2019);
    Date today = Settings::instance().evaluationDate();

    // Market Date with Options premiums for .STOX50E from 24th April 2019, on EUREX exchange
    vector<string> dates({ 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", 
        "2019-06-21", "2019-06-21", "2019-06-21", "2019-06-21", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", 
        "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", 
        "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", 
        "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", 
        "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", 
        "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", 
        "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", 
        "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-07-19", "2019-08-16", "2019-08-16", 
        "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", 
        "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", 
        "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", 
        "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", 
        "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", 
        "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", "2019-08-16", 
        "2019-08-16", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", 
        "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", 
        "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", 
        "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", 
        "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", 
        "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", 
        "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", 
        "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", "2019-09-20", 
        "2019-09-20", "2019-09-20", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", 
        "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", 
        "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", "2019-10-18", 
        "2019-10-18", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", 
        "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", 
        "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", 
        "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", 
        "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", 
        "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", 
        "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", 
        "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", "2019-12-20", 
        "2019-12-20", "2019-12-20", "2019-12-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", 
        "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", 
        "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", 
        "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", 
        "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", 
        "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", 
        "2020-03-20", "2020-03-20", "2020-03-20", "2020-03-20", "2020-06-19", "2020-06-19", "2020-06-19", "2020-06-19", "2020-06-19"});

    vector<Real> strikes({
        500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2050, 2100, 2150, 2200, 2250, 2300, 2350, 2400, 
        2450, 2500, 2550, 2575, 2600, 2625, 2650, 2675, 2700, 2725, 2750, 2775, 2800, 2825, 2850, 2875, 2900, 2925, 2950, 2975, 3000, 3025, 3050, 
        3075, 3100, 3125, 3150, 3175, 3200, 3225, 3250, 3275, 3300, 3325, 3350, 3375, 3400, 3425, 3450, 3475, 3500, 3525, 3550, 3575, 3600, 3625, 
        3650, 3675, 3700, 3725, 3750, 3775, 3800, 3825, 3850, 3900, 3950, 4000, 4050, 4100, 4150, 4200, 4250, 4300, 4350, 4400, 4600, 5000, 6000, 
        10000, 1700, 1800, 1900, 2000, 2050, 2100, 2150, 2200, 2250, 2300, 2325, 2350, 2375, 2400, 2425, 2450, 2475, 2500, 2525, 2550, 2575, 2600, 
        2625, 2650, 2675, 2700, 2725, 2750, 2775, 2800, 2825, 2850, 2875, 2900, 2925, 2950, 2975, 3000, 3025, 3050, 3075, 3100, 3125, 3150, 3175, 
        3200, 3225, 3250, 3275, 3300, 3325, 3350, 3375, 3400, 3425, 3450, 3475, 3500, 3525, 3550, 3575, 3600, 3625, 3650, 3675, 3700, 3725, 3750, 
        3775, 3800, 3825, 3850, 3900, 4000, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2350, 2400, 2450, 2500, 2550, 2600, 2625, 2650, 2675, 
        2700, 2750, 2800, 2850, 2900, 2925, 2950, 2975, 3000, 3025, 3050, 3075, 3100, 3125, 3150, 3175, 3200, 3225, 3250, 3275, 3300, 3325, 3350, 
        3375, 3400, 3425, 3450, 3475, 3500, 3525, 3550, 3575, 3600, 3625, 3650, 3675, 3700, 3725, 3750, 3775, 3800, 3825, 3850, 3900, 4000, 4100, 
        500, 600, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1850, 1900, 1950, 2000, 2050, 2100, 2150, 2200, 2250, 2300, 2350, 
        2400, 2450, 2500, 2550, 2600, 2650, 2700, 2750, 2800, 2850, 2900, 2950, 2975, 3000, 3025, 3050, 3075, 3100, 3125, 3150, 3175, 3200, 3225, 
        3250, 3275, 3300, 3325, 3350, 3375, 3400, 3425, 3450, 3475, 3500, 3525, 3550, 3575, 3600, 3625, 3650, 3675, 3700, 3725, 3750, 3775, 3800, 
        3825, 3850, 3900, 3950, 4000, 4050, 4100, 4200, 4250, 6000, 10000, 3150, 3175, 3200, 3225, 3250, 3275, 3300, 3325, 3350, 3375, 3400, 3425, 
        3450, 3475, 3500, 3525, 3550, 3575, 3600, 3625, 3650, 3675, 3700, 3725, 3750, 3775, 3800, 3825, 3850, 250, 500, 600, 700, 800, 900, 1000, 
        1200, 1300, 1400, 1450, 1500, 1600, 1650, 1700, 1750, 1800, 1850, 1900, 1950, 2000, 2050, 2100, 2150, 2200, 2250, 2300, 2350, 2400, 2450, 
        2500, 2550, 2600, 2650, 2700, 2750, 2800, 2850, 2900, 2925, 2950, 3000, 3050, 3100, 3150, 3200, 3250, 3300, 3350, 3400, 3450, 3500, 3550, 
        3600, 3650, 3700, 3750, 3775, 3800, 3850, 3900, 3950, 4000, 4050, 4100, 4150, 4200, 4250, 4300, 4350, 4400, 4500, 4600, 4700, 4800, 5000, 
        5200, 5400, 5600, 5800, 6000, 10000, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2050, 2100, 2150, 2200, 2250, 
        2300, 2350, 2400, 2450, 2500, 2550, 2600, 2650, 2700, 2750, 2800, 2850, 2900, 2950, 3000, 3050, 3100, 3150, 3200, 3250, 3300, 3350, 3400, 
        3450, 3500, 3550, 3600, 3650, 3700, 3750, 3800, 3850, 3900, 3950, 4000, 4050, 4100, 4150, 4200, 4300, 4400, 4500, 4600, 4700, 500, 600, 
        800, 900, 1000});

    vector<Real> callPremiums({ 
        2932.9, 2832.8, 2732.8, 2632.7, 2532.7, 2432.6, 2332.5, 2232.5, 2132.4, 2032.3, 1932.3, 1832.2, 1732.2, 1632.2, 1532.1, 1432.1, 1382.1, 
        1332.1, 1282.1, 1232.1, 1182.2, 1132.2, 1082.2, 1032.3, 982.3, 932.4, 882.5, 857.6, 832.6, 807.7, 782.8, 757.9, 733, 708.1, 683.2, 658.4, 
        633.6, 608.8, 584, 559.2, 534.5, 509.9, 485.3, 460.7, 436.2, 411.8, 387.5, 363.3, 339.3, 315.4, 291.7, 268.2, 245.1, 222.4, 200.1, 178.4, 
        157.3, 137.1, 117.7, 99.4, 82.5, 67, 53.2, 41.3, 31.1, 22.7, 16.2, 11.3, 7.6, 5.1, 3.3, 2.2, 1.4, 1, 0.7, 0.5, 0.3, 0.2, 0.2, 0.1, 0.1, 
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1728.8, 1628.8, 1528.7, 1428.8, 1378.8, 1328.8, 1278.9, 1228.9, 1179, 
        1129.1, 1104.1, 1079.2, 1054.3, 1029.3, 1004.4, 979.5, 954.6, 929.7, 904.8, 879.9, 855.1, 830.2, 805.4, 780.6, 755.9, 731.1, 706.4, 681.8, 
        657.1, 632.5, 608, 583.5, 559.1, 534.7, 510.4, 486.2, 462.1, 438.1, 414.3, 390.6, 367, 343.7, 320.6, 297.8, 275.3, 253.3, 231.7, 210.6, 
        190.1, 170.2, 151, 132.7, 115.4, 99.2, 84.1, 70.4, 58.1, 47.2, 37.7, 29.7, 23.1, 17.7, 13.5, 10.2, 7.6, 5.6, 4.2, 3.1, 2.3, 1.7, 1.3, 1, 
        0.7, 0.3, 1824.7, 1724.7, 1624.7, 1524.7, 1424.8, 1324.9, 1225.1, 1125.5, 1075.7, 1026, 976.4, 926.8, 877.4, 828, 803.4, 778.8, 754.3, 
        729.8, 680.9, 632.3, 583.9, 536, 512.1, 488.4, 464.8, 441.4, 418.2, 395.1, 372.2, 349.6, 327.3, 305.3, 283.7, 262.5, 241.7, 221.4, 201.6, 
        182.4, 163.8, 146.1, 129.3, 113.3, 98.4, 84.7, 72.2, 60.9, 50.8, 42, 34.4, 27.8, 22.3, 17.7, 14, 11, 8.6, 6.7, 5.2, 4.1, 3.2, 2.5, 1.6, 0.6, 
        0.3, 2924.7, 2824.5, 2624.2, 2524, 2423.9, 2323.7, 2223.6, 2123.5, 2023.4, 1923.4, 1823.3, 1723.3, 1623.4, 1573.4, 1523.5, 1473.6, 1423.7, 
        1373.9, 1324.1, 1274.3, 1224.6, 1174.9, 1125.3, 1075.8, 1026.4, 977, 927.8, 878.8, 829.9, 781.2, 732.8, 684.6, 636.8, 589.3, 542.2, 495.7, 
        472.6, 449.8, 427.1, 404.6, 382.4, 360.4, 338.8, 317.4, 296.4, 275.7, 255.5, 235.8, 216.7, 198.2, 180.4, 163.3, 147, 131.4, 116.7, 102.9, 90, 
        78, 67.1, 57.4, 48.8, 41.1, 34.4, 28.5, 23.4, 19.1, 15.5, 12.5, 10.1, 8.2, 6.6, 5.3, 3.5, 2.3, 1.5, 1, 0.7, 0.4, 0.3, 0.1, 0.1, 320.1, 299.8, 
        279.9, 260.4, 241.4, 222.9, 205, 187.6, 170.9, 154.9, 139.7, 125, 111.4, 98.6, 86.8, 76, 66.2, 57.2, 49.2, 42.1, 35.7, 30.1, 25.3, 21.1, 17.5, 
        14.5, 11.9, 9.8, 8, 3162.7, 2912, 2811.8, 2711.6, 2611.3, 2511.1, 2411, 2210.7, 2110.6, 2010.6, 1960.6, 1910.6, 1810.7, 1760.8, 1710.9, 1661.1, 
        1611.3, 1561.5, 1511.8, 1462.1, 1412.5, 1362.9, 1313.4, 1264, 1214.7, 1165.6, 1116.5, 1067.6, 1018.8, 970.2, 921.8, 873.6, 825.8, 778.2, 730.9, 
        684.1, 637.7, 591.9, 546.7, 524.3, 502.2, 458.5, 415.7, 374, 333.8, 295.1, 258, 223.1, 190.2, 159.7, 132.2, 107.6, 86.2, 67.8, 52.4, 39.7, 29.5, 
        25.3, 21.6, 15.7, 11.3, 8.1, 5.8, 4.2, 3.1, 2.2, 1.6, 1.2, 0.9, 0.7, 0.5, 0.3, 0.2, 0.2, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 2499.7, 2399.5, 
        2299.3, 2199.2, 2099.3, 1999.4, 1899.6, 1800, 1700.6, 1601.3, 1502.3, 1403.5, 1354.3, 1305.2, 1256.1, 1207.2, 1158.4, 1109.9, 1061.5, 1013.4, 
        965.5, 918, 870.7, 823.8, 777.2, 731.1, 685.5, 640.5, 596, 552.3, 509.5, 467.5, 426.6, 386.9, 348.4, 311.7, 276.5, 242.8, 211.4, 182, 155.1, 
        130.6, 108.7, 89.5, 72.6, 58.2, 46.1, 36, 27.9, 21.4, 16.3, 12.4, 9.4, 7.1, 5.4, 4.1, 2.4, 1.4, 0.9, 0.6, 0.4, 2822, 2721.7, 2521.1, 2420.9, 2320.8});
    
    vector<Real> putPremiums({ 
        0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.2, 0.2, 0.2, 0.3, 0.3, 0.4, 0.5, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 
        1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 2, 2.2, 2.4, 2.6, 2.9, 3.2, 3.5, 3.9, 4.4, 4.9, 5.5, 6.2, 7.1, 8, 9.2, 10.5, 12, 13.9, 16.2, 19, 22.3, 26.3, 31, 
        36.7, 43.4, 51.4, 61, 72.3, 85.3, 100.1, 116.8, 135.2, 155.4, 176.8, 199.2, 222.4, 246.3, 270.6, 295.2, 319.9, 344.7, 369.6, 394.5, 419.5, 469.4, 
        519.4, 569.4, 619.4, 669.4, 719.5, 769.5, 819.5, 869.6, 919.6, 969.6, 1169.8, 1570, 2570.7, 6573.3, 0.2, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 
        1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 2, 2.1, 2.3, 2.5, 2.7, 2.9, 3.2, 3.5, 3.8, 4.1, 4.5, 5, 5.4, 6, 6.6, 7.2, 8, 8.8, 9.7, 10.8, 11.9, 13.2, 
        14.7, 16.4, 18.3, 20.6, 23.1, 26.1, 29.5, 33.5, 38, 43.1, 49, 55.7, 63.4, 72.2, 82.2, 93.5, 106.2, 120.3, 135.8, 152.9, 171.3, 190.9, 211.7, 233.4, 
        255.9, 278.9, 302.5, 326.4, 350.7, 375.1, 399.7, 424.5, 474.2, 573.9, 0.2, 0.3, 0.5, 0.6, 0.9, 1.1, 1.5, 1.9, 2.2, 2.6, 3, 3.5, 4.1, 4.9, 5.3, 5.7, 
        6.2, 6.7, 7.9, 9.4, 11.1, 13.2, 14.4, 15.7, 17.1, 18.8, 20.5, 22.5, 24.7, 27.1, 29.8, 32.9, 36.3, 40.1, 44.3, 49, 54.3, 60.1, 66.6, 73.9, 82.1, 
        91.2, 101.3, 112.6, 125.1, 138.9, 153.9, 170.1, 187.4, 205.9, 225.4, 245.9, 267.2, 289.2, 311.9, 335, 358.6, 382.5, 406.6, 430.9, 480.1, 579.3, 
        679.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.2, 0.3, 0.4, 0.5, 0.7, 0.9, 1, 1.2, 1.4, 1.6, 1.8, 2.1, 2.4, 2.7, 3.2, 3.6, 4.2, 4.9, 5.6, 6.5, 7.6, 
        8.8, 10.2, 11.8, 13.7, 15.9, 18.5, 21.6, 25.1, 27.1, 29.3, 31.6, 34.2, 37, 40.1, 43.5, 47.2, 51.2, 55.6, 60.4, 65.8, 71.7, 78.3, 85.5, 93.4, 102.2, 
        111.7, 121.9, 133.2, 145.3, 158.4, 172.6, 187.9, 204.3, 221.7, 239.9, 259.1, 279, 299.8, 321.2, 343.3, 365.9, 389, 412.5, 436.3, 484.5, 533.4, 
        582.7, 632.3, 682.1, 781.9, 831.9, 2584.6, 6591.3, 54.6, 59.4, 64.5, 70.1, 76.2, 82.7, 89.8, 97.6, 105.9, 115, 124.7, 135.2, 146.5, 158.8, 172.1, 
        186.3, 201.4, 217.7, 234.7, 252.6, 271.3, 290.8, 311, 331.8, 353.3, 375.3, 397.8, 420.7, 444, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.2, 0.5, 0.6, 0.9, 1, 
        1.2, 1.5, 1.7, 2, 2.3, 2.6, 3, 3.4, 3.8, 4.3, 4.9, 5.5, 6.2, 7.1, 8, 9.1, 10.3, 11.6, 13.2, 14.9, 16.9, 19.1, 21.6, 24.5, 27.8, 31.6, 35.9, 40.8, 
        43.5, 46.4, 52.9, 60.2, 68.7, 78.6, 90, 103.1, 118.2, 135.5, 155.2, 177.8, 203.3, 232, 263.7, 298.4, 335.9, 375.8, 396.7, 418.1, 462.2, 508, 554.9, 
        602.8, 651.3, 700.3, 749.6, 799.1, 848.8, 898.6, 948.5, 998.5, 1098.6, 1198.7, 1298.9, 1399.1, 1599.6, 1800.1, 2000.6, 2201.1, 2401.6, 2602.1, 
        6612.4, 0.2, 0.3, 0.5, 0.7, 1.1, 1.6, 2.2, 2.9, 3.8, 4.9, 6.2, 7.8, 8.7, 9.7, 10.9, 12.1, 13.5, 15.1, 16.9, 19, 21.3, 23.9, 26.8, 30.1, 33.7, 37.8, 
        42.3, 47.4, 53.2, 59.7, 67, 75.2, 84.5, 94.9, 106.6, 119.9, 134.9, 151.5, 170.2, 191, 214.3, 240, 268.4, 299.2, 332.5, 368.4, 406.3, 446.4, 488.5, 
        532.2, 577.3, 623.5, 670.6, 718.5, 767, 815.8, 914.5, 1013.9, 1113.7, 1213.7, 1313.9, 0.1, 0.1, 0.4, 0.7, 1});

    vector<Date> expiries;
    for (Size i = 0; i < dates.size(); i++) {
        vector<string> tokens;
        boost::split(tokens, dates[i], boost::is_any_of("-"));
        expiries.push_back(Date(boost::lexical_cast<Integer>(tokens[2]), Month(boost::lexical_cast<Integer>(tokens[1])), 
            boost::lexical_cast<Integer>(tokens[0])));
    }

    // build option price surfaces from the market data
    boost::shared_ptr<OptionPriceSurface> callSurface = boost::make_shared<OptionPriceSurface>(today, expiries, strikes, callPremiums, Actual365Fixed());
    boost::shared_ptr<OptionPriceSurface> putSurface = boost::make_shared<OptionPriceSurface>(today, expiries, strikes, putPremiums, Actual365Fixed());

    // forecast curve - discount rates taken bootstrapped EUR-EONIA curve on asof date
    vector<Time> forecastTimes({
        0.00000, 0.00273, 0.03287, 0.05205, 0.07123, 0.09315, 0.17534, 0.26301, 0.34246, 0.42739, 0.51506, 0.59452,
        0.68493, 0.76438, 0.84657, 0.92602, 1.01369, 1.26301, 1.51232, 1.76438, 2.01095, 3.01095, 4.01095, 5.01917,
        6.01917, 7.01643, 8.01369, 9.01643, 10.0164, 11.0219, 12.0219, 15.0191, 20.0219, 25.0273, 30.0301 });

    vector<Real> forecastValues({
        1.00000, 1.00001, 1.00013, 1.00021, 1.00025, 1.00037, 1.00069, 1.00104, 1.00135, 1.00169, 1.00204, 1.00236,
        1.00273, 1.00305, 1.00339, 1.00371, 1.00406, 1.00476, 1.00566, 1.00652, 1.00720, 1.00937, 1.00987, 1.00824,
        1.00418, 0.99821, 0.99160, 0.98014, 0.96879, 0.95619, 0.94282, 0.90144, 0.83797, 0.78690, 0.74930 });

    vector<Handle<Quote> > forecastQuotes;
    for (Size i = 0; i < forecastValues.size(); i++)
        forecastQuotes.push_back(Handle<Quote>(boost::make_shared<SimpleQuote>(forecastValues[i])));

    Handle<YieldTermStructure> forecastCurve(
        boost::make_shared<InterpolatedDiscountCurve>(forecastTimes, forecastQuotes, 0, TARGET(), Actual365Fixed()));

    // equity spot for asof date
    Handle<Quote> equitySpot = Handle<Quote>(boost::make_shared<SimpleQuote>(3502.63));

    // equity forward stripper
    boost::shared_ptr<QuantExt::EquityForwardCurveStripper> efcs = boost::make_shared<QuantExt::EquityForwardCurveStripper>(
        callSurface, putSurface, forecastCurve, equitySpot, Exercise::Type::European);

    // get terms and quotes from the stripper
    vector<Date> forwardExpiries = efcs->expiries();
    vector<Real> forwardQuotes = efcs->forwards();

    // expected results
    vector<Date> expectedExpiries({ Date(21, Jun, 2019), Date(19, Jul, 2019), Date(16, Aug, 2019), Date(20, Sep, 2019), 
        Date(18, Oct, 2019), Date(20, Dec, 2019), Date(20, Mar, 2020), Date(19, Jun, 2020) });
    vector<Real> expectedQuotes({ 3430.954, 3426.9098, 3422.088, 3419.738, 3414.895, 3404.503, 3391.04, 3309.488 });

    Real tolerance = 1e-3;
    for (Size i = 0; i < expectedQuotes.size(); i++) {
        BOOST_CHECK_EQUAL(forwardExpiries[i], expectedExpiries[i]);
        BOOST_CHECK_CLOSE(forwardQuotes[i], expectedQuotes[i], tolerance);
    }

    // Compare to Actual Future prices on day
    // STXE Futures on EUREX from asof data
    vector<Date> futureExpiries({ Date(21, Jun, 2019), Date(20, Sep, 2019), Date(20, Dec, 2019), Date(20, Mar, 2020), 
        Date(19, Jun, 2020) });
    vector<Real> futureQuotes({ 3431, 3420, 3404, 3391, 3310 });

    // allow a bigger tolerance - futues quotes have no decimal places
    tolerance = 1;
    for (Size i = 0; i < futureQuotes.size(); i++) {
        vector<Date>::iterator found = find(forwardExpiries.begin(), forwardExpiries.end(), futureExpiries[i]);
        if (found == forwardExpiries.end())
            BOOST_TEST_ERROR("Failed to find expiry " << futureExpiries[i] << " in forward expiries.");
        Size j = distance(forwardExpiries.begin(), found); // index of expiry
        BOOST_CHECK_CLOSE(forwardQuotes[j], futureQuotes[i], tolerance);
    }
}

BOOST_AUTO_TEST_CASE(testEquityForwardCurveStripperAmerican) {
    BOOST_TEST_MESSAGE("Testing stripper with American Option prices");
}

BOOST_AUTO_TEST_SUITE_END()

BOOST_AUTO_TEST_SUITE_END()